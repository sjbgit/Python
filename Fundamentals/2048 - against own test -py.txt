"""
Clone of 2048 game.
"""

import poc_2048_gui        

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.    
OFFSETS = {UP: (1, 0), 
           DOWN: (-1, 0), 
           LEFT: (0, 1), 
           RIGHT: (0, -1)} 
   
def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    # replace with your code
    return []

class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        # replace with your code
        self.grid_height = grid_height
        self.grid_width = grid_width
        #self.board = [[]]
        self.reset()
        
        self.set_dict()
        
        print self.grid_height
        print self.grid_width
        
    def set_dict(self):
        """
        Creates the mapping for movements
        """
        up_list = []
        for x_pos in range(0, self.grid_width):
            up_list.append((0,x_pos))
            
        down = []
        for x_pos in range(0, self.grid_width):
            down.append((self.grid_height - 1,x_pos))
            
        left = []
        for x_pos in range(0, self.grid_height):
            left.append((x_pos,0))
            
        right = []
        for x_pos in range(0, self.grid_height):
            right.append((x_pos,self.grid_width - 1))
          
        self.indicies = {UP: up_list, DOWN: down, LEFT: left, RIGHT: right}     
        print  self.indicies
    
    def reset(self):
        """
        Reset the game so the grid is empty.
        """
        # replace with your code
        self.board = []
        for x_pos in range(0, self.grid_height):  
            self.board.append([])
            for y_pos in range(0, self.grid_width):                
                self.board[x_pos].append(y_pos - y_pos)
        
    
    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        # replace with your code
        #output = ''
        #for x in range(0, self.grid_height): 
        #    print str(self.board[x])
            #output + '\n' + str(self.board[x])
        #return output
        return str(self.board)

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        # replace with your code
        return self.grid_height
    
    def get_grid_width(self):
        """
        Get the width of the board.
        """
        # replace with your code
        return self.grid_width
                            
    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        # replace with your code
        pass
        
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty 
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        # replace with your code
        pass
        
    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """        
        self.board[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """        
        # replace with your code
        
        #print 'get tile ' + str(row) + ' ' + str(col)
        #self.print_board()
        return self.board[row][col]
 
    
poc_2048_gui.run_gui(TwentyFortyEight(4, 4))
