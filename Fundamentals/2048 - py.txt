"""
Clone of 2048 game.
"""

#import poc_2048_gui   
import random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.    
OFFSETS = {UP: (1, 0), 
           DOWN: (-1, 0), 
           LEFT: (0, 1), 
           RIGHT: (0, -1)} 
   
def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    # replace with your code
    non_zero = []
    for x in range(len(line)):
        print line[x]
        if (line[x] != 0):
            non_zero.append(line[x])
    
    has_merged = []
    result = []
    for x in range(len(non_zero)):
        if (x < len(non_zero)):
            print 'x'
            #if (non_zero[x] == non_zero[x + 1]):
            #    result.append(non_zero[x] + non_zero[x + 1])
                #has_merged[x] = True
                #has_merged[x + 1] = True
    
    #return non_zero
    return []

class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        # replace with your code
        self.grid_height = grid_height
        self.grid_width = grid_width
        #self.board = [[]]
        self.reset()
        
        self.set_indicies_dict()
        
        print self.grid_height
        print self.grid_width
        
    def set_indicies_dict(self):
        up = []
        for x in range(0, self.grid_width):
            up.append((0,x))
            
        down = []
        for x in range(0, self.grid_width):
            down.append((self.grid_height - 1,x))
            
        left = []
        for x in range(0, self.grid_height):
            left.append((x,0))
            
        right = []
        for x in range(0, self.grid_height):
            right.append((x,self.grid_width - 1))
          
        self.indicies = {UP: up, DOWN: down, LEFT: left, RIGHT: right}     
        print  self.indicies
        
    def reset(self):
        """
        Reset the game so the grid is empty.
        """
        # replace with your code
        print 'reset'
        self.board = []
        for x in range(0, self.grid_height):  
            self.board.append([])
            for y in range(0, self.grid_width):
                self.board[x].append(0)
                #print self.board
                #self.board = [x][y] = 0
        #pass
        print 'end reset'
    
    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        # replace with your code
        #output = ''
        #for x in range(0, self.grid_height): 
        #    print str(self.board[x])
            #output + '\n' + str(self.board[x])
        #return output
        return str(self.board)

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        # replace with your code
        return self.grid_height
    
    def get_grid_width(self):
        """
        Get the width of the board.
        """
        # replace with your code
        return self.grid_width
                            
    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        # replace with your code
        print direction
        pass
        
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty 
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        # replace with your code
        items = []
        for x in range(0, 9):
            items.append(2)
            
        items.append(4)
        random.shuffle(items)
        isEmpty = True
        counter = self.grid_width * self.grid_height
        
        #y = random.randint(0,self.grid_width - 1)
        #x = random.randint(0,self.grid_height - 1)
        #self.board[x][y] = items[0]
        
        while isEmpty != False or counter <= 0:
            y = random.randint(0,self.grid_width - 1)
            x = random.randint(0,self.grid_height - 1)
          
            isEmpty = self.get_tile(x,y) == 0
            
            if (isEmpty == True):
                self.board[x][y] = items[0]
            
            random.shuffle(items)
            counter -= 1
        
        
        #print x, y
        print items
        pass
        
    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """        
        self.board[row][col] = value
        pass

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """        
        # replace with your code
        
        #print 'get tile ' + str(row) + ' ' + str(col)
        #self.print_board()
        return self.board[row][col]
    
    def print_board(self):
        for x in range(0, self.grid_height): 
            print str(self.board[x])
 
board = TwentyFortyEight(5, 4) 
print 'init'
#poc_2048_gui.run_gui(board)

#board.set_tile(0,0,4)

print board

print board.get_tile(0,0)
board.new_tile()
print ''
board.print_board()
print '----------------------'
line = [2, 0, 2, 2]
print merge(line)
print line


